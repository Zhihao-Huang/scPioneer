remotes::install_github('Zhihao-Huang/scPioneer')
remotes::install_github('Zhihao-Huang/scPioneer')
devtools::document()
devtools::build()
#.libPaths("/usersdata/jasper/database/R_4.0.3")
install.packages("/Users/zhihaohuang/Documents/GitHub/scPioneer_2.0.0.tar.gz",
type = 'source',dependencies=TRUE,repos = NULL)
#.libPaths("/usersdata/jasper/database/R_4.0.3")
install.packages("/Users/zhihaohuang/Documents/GitHub/scPioneer_2.0.0.tar.gz",
type = 'source',dependencies=TRUE,repos = NULL)
getwd()
list.files('/Users/zhihaohuang/Documents/GitHub/scPioneer/data-raw/10X_v3.1_exampleData_mouse/5k_Mouse_PBMCs/filtered_feature_bc_matrix/')
# test multi samples from samplelist
param <- PHASE1_run_Seurat_v5_QC_clustering_param_template()
param$is_multidata <- 'TRUE'
param$species <- 'Mouse'
param$samplelist <- '/Users/zhihaohuang/Documents/GitHub/scPioneer/data-raw/10X_v3.1_exampleData_mouse/samplelist'
param$outdir <- '/Users/zhihaohuang/Documents/GitHub/scPioneer/scPioneer/test/multi_mouse/'
obj <- PHASE1_run_Seurat_v5_QC_clustering(param)
param$outdir <- '/Users/zhihaohuang/Documents/GitHub/scPioneer/test/multi_mouse/'
obj <- PHASE1_run_Seurat_v5_QC_clustering(param)
DimPlot(obj)
load('./R/sysdata.rda')
library(ellmer)
install.packages("ellmer")
vignette("ellmer")
chat <- chat_ollama(model = "llama3.2")
library(ellmer)
chat <- chat_ollama(model = "llama3.2")
chat$chat()
chat$chat('who are you')
Sys.setenv(OPENAI_API_KEY = '')
# Load packages
library(GPTCelltype)
BiocManager::install('GPTCelltype')
library(openai)
library(scPioneer)
pbmc <- FindClusters(pbmc, resolution = 2)
Idents(pbmc) <- pbmc$seurat_clusters
markers <- FindAllMarkers(pbmc, logfc.threshold = 0.5, test.use = 'MAST', only.pos = T)
BiocManager::install("MAST")
markers <- FindAllMarkers(pbmc, logfc.threshold = 0.5, test.use = 'MAST', only.pos = T)
top10 <- markers %>% group_by(cluster) %>% top_n(10, avg_log2FC)
source('~/Documents/GitHub/scPioneer/R/annotation.R')
annodf <- anno_ellmer(top10)
#' # depends on local model ollama. First download and install Ollama, then install model with ollama pull llama3.2. Test on Mac.
annodf2 <- anno_ellmer(top10, llm_function = 'ollama')
chat <- chat_ollama(
system_prompt = NULL,
turns = NULL,
base_url = "http://localhost:11434",
model = 'llama3.2',
seed = seed,
api_args = list(),
echo = NULL
)
chat <- chat_ollama(
system_prompt = NULL,
turns = NULL,
base_url = "http://localhost:11434",
model = 'llama3.2',
seed = 123,
api_args = list(),
echo = NULL
)
chat$chat('hi')
source('~/Documents/GitHub/scPioneer/R/annotation.R')
content <- anno_ellmer(top10,return.content = T)
chat$chat(content)
content
cat(content)
source('~/Documents/GitHub/scPioneer/R/annotation.R')
content <- anno_ellmer(top10,return.content = T)
cat(content)
source('~/Documents/GitHub/scPioneer/R/annotation.R')
#' # depends on local model ollama. First download and install Ollama, then install model with ollama pull llama3.2. Test on Mac.
annodf2 <- anno_ellmer(top10, llm_function = 'ollama')
annodf2
content <- anno_ellmer(top10,return.content = T)
cat(content)
chat$chat(content)
source('~/Documents/GitHub/scPioneer/R/annotation.R')
content <- anno_ellmer(top10,return.content = T)
cat(content)
chat$chat(content)
chat$chat(content)
chat <- chat_ollama(
system_prompt = NULL,
turns = NULL,
base_url = "http://localhost:11434",
model = 'llama3.2',
seed = 123,
api_args = list(),
echo = NULL
)
#' # depends on local model ollama. First download and install Ollama, then install model with ollama pull llama3.2. Test on Mac.
annodf2 <- anno_ellmer(top10, llm_function = 'ollama')
annodf2
#' # depends on local model ollama. First download and install Ollama, then install model with ollama pull llama3.2. Test on Mac.
annodf2 <- anno_ellmer(top10, llm_function = 'ollama',  return.content = F)
chat <- chat_ollama(
system_prompt = NULL,
turns = NULL,
base_url = "http://localhost:11434",
model = 'llama3.2',
seed = 123,
api_args = list(),
echo = NULL
)
content <- anno_ellmer(top10,return.content = T)
cat(content)
chat$chat(content)
chat <- chat_ollama(
system_prompt = NULL,
turns = NULL,
base_url = "http://localhost:11434",
model = 'llama3.2',
seed = 12345,
api_args = list(),
echo = NULL
)
content <- anno_ellmer(top10,return.content = T)
cat(content)
chat$chat(content)
source('~/Documents/GitHub/scPioneer/R/annotation.R')
#' # depends on local model ollama. First download and install Ollama, then install model with ollama pull llama3.2. Test on Mac.
annodf2 <- anno_ellmer(top10, llm_function = 'ollama',  return.content = F)
chat <- chat_ollama(
system_prompt = NULL,
turns = NULL,
base_url = "http://localhost:11434",
model = 'llama3.2',
seed = 12345,
api_args = list(),
echo = NULL
)
content <- anno_ellmer(top10,return.content = T)
cat(content)
chat$chat(content)
source('~/Documents/GitHub/scPioneer/R/annotation.R')
chat <- chat_ollama(
system_prompt = NULL,
turns = NULL,
base_url = "http://localhost:11434",
model = 'llama3.2',
seed = 12345,
api_args = list(),
echo = NULL
)
content <- anno_ellmer(top10,return.content = T)
cat(content)
chat$chat(content)
annodf <- anno_ellmer(top10)
annodf
source('~/Documents/GitHub/scPioneer/R/annotation.R')
annodf <- anno_ellmer(top10)
#' # depends on local model ollama. First download and install Ollama, then install model with ollama pull llama3.2. Test on Mac.
annodf2 <- anno_ellmer(top10, llm_function = 'ollama',  return.content = F)
chat <- chat_ollama(
system_prompt = NULL,
turns = NULL,
base_url = "http://localhost:11434",
model = 'llama3.2',
seed = 12345,
api_args = list(),
echo = NULL
)
content <- anno_ellmer(top10,return.content = T)
cat(content)
chat$chat(content)
#### panglaodb
library(dplyr)
angrycelldata <- readRDS('./data-raw/angrycelldb.rds')
db_self <- angrycelldata$db_self
panglaodb_hs <- angrycelldata$panglaodb_hs
panglaodb_mm <- angrycelldata$panglaodb_mm
# orthologs genesets
files <- list.files('./data-raw/')
txtfiles <- files[grepl('txt$',files)]
#### panglaodb
library(dplyr)
angrycelldata <- readRDS('./data-raw/angrycelldb.rds')
db_self <- angrycelldata$db_self
panglaodb_hs <- angrycelldata$panglaodb_hs
panglaodb_mm <- angrycelldata$panglaodb_mm
names(angrycelldata)
print(names(angrycelldata))
paste0(names(angrycelldata), ' <- angrycelldata$', names(angrycelldata))
catpaste(paste0(names(angrycelldata), ' <- angrycelldata$', names(angrycelldata)),collapse = '\n'))
cat(paste(paste0(names(angrycelldata), ' <- angrycelldata$', names(angrycelldata)),collapse = '\n'))
A_M <- angrycelldata$A_M
addm_qss <- angrycelldata$addm_qss
D_M <- angrycelldata$D_M
db_self <- angrycelldata$db_self
db_self_mm10 <- angrycelldata$db_self_mm10
db_user_mm10 <- angrycelldata$db_user_mm10
db_users <- angrycelldata$db_users
db1 <- angrycelldata$db1
db2 <- angrycelldata$db2
db3 <- angrycelldata$db3
db4 <- angrycelldata$db4
dblayers <- angrycelldata$dblayers
dbref <- angrycelldata$dbref
dbspf <- angrycelldata$dbspf
HKgene <- angrycelldata$HKgene
homolog_Human_mouse <- angrycelldata$homolog_Human_mouse
links <- angrycelldata$links
mindrlist1 <- angrycelldata$mindrlist1
mindrlist2 <- angrycelldata$mindrlist2
mlist1 <- angrycelldata$mlist1
mlist2 <- angrycelldata$mlist2
mlist3 <- angrycelldata$mlist3
MSigDBlist <- angrycelldata$MSigDBlist
MSigDBnames <- angrycelldata$MSigDBnames
Rlist <- angrycelldata$Rlist
slist <- angrycelldata$slist
templv1.2.0 <- angrycelldata$templv1.2.0
user_links <- angrycelldata$user_links
user_mindrlist1 <- angrycelldata$user_mindrlist1
user_mindrlist2 <- angrycelldata$user_mindrlist2
user_mlist1 <- angrycelldata$user_mlist1
user_mlist2 <- angrycelldata$user_mlist2
user_mlist3 <- angrycelldata$user_mlist3
user_Rlist <- angrycelldata$user_Rlist
user_slist <- angrycelldata$user_slist
panglaodb_hs <- angrycelldata$panglaodb_hs
panglaodb_mm <- angrycelldata$panglaodb_mm
# orthologs genesets
files <- list.files('./data-raw/')
files
txtfiles <- files[grepl('^orthologs_&txt$',files)]
txtfiles <- files[grepl('^orthologs_',files)]
txtfiles <- files[grepl('^orthologs_mouse',files)]
orthologslist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/', x), sep = '\t')
})
versions <- gsub('^.*version_|.txt$','', txtfiles)
names(orthologslist) <- paste0('v',versions)
View(orthologslist)
# symbol ensembl genelist
files <- list.files('./data-raw/sym_ebl/Human/')
txtfiles <- files[grepl('txt$',files)]
humanlist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/sym_ebl/Human/', x), sep = '\t')
})
versions <- gsub('^.*version_|.txt$','', txtfiles)
names(humanlist) <- paste0('v',versions)
files <- list.files('./data-raw/sym_ebl/Mouse/')
txtfiles <- files[grepl('txt$',files)]
mouselist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/sym_ebl/Mouse/', x), sep = '\t')
})
versions <- gsub('^.*version_|.txt$','', txtfiles)
names(mouselist) <- paste0('v',versions)
symbol_ensembl_list <- list(Human = humanlist, Mouse = mouselist)
gc()
angrycelldata <- readRDS('./data-raw/angrycelldb.rds')
print(names(angrycelldata))
cat(paste(paste0(names(angrycelldata), ' <- angrycelldata$', names(angrycelldata)),collapse = '\n'))
A_M <- angrycelldata$A_M
addm_qss <- angrycelldata$addm_qss
D_M <- angrycelldata$D_M
db_self <- angrycelldata$db_self
db_self_mm10 <- angrycelldata$db_self_mm10
db_user_mm10 <- angrycelldata$db_user_mm10
db_users <- angrycelldata$db_users
db1 <- angrycelldata$db1
db2 <- angrycelldata$db2
db3 <- angrycelldata$db3
db4 <- angrycelldata$db4
dblayers <- angrycelldata$dblayers
dbref <- angrycelldata$dbref
dbspf <- angrycelldata$dbspf
HKgene <- angrycelldata$HKgene
homolog_Human_mouse <- angrycelldata$homolog_Human_mouse
links <- angrycelldata$links
mindrlist1 <- angrycelldata$mindrlist1
mindrlist2 <- angrycelldata$mindrlist2
mlist1 <- angrycelldata$mlist1
mlist2 <- angrycelldata$mlist2
mlist3 <- angrycelldata$mlist3
MSigDBlist <- angrycelldata$MSigDBlist
MSigDBnames <- angrycelldata$MSigDBnames
Rlist <- angrycelldata$Rlist
slist <- angrycelldata$slist
templv1.2.0 <- angrycelldata$templv1.2.0
user_links <- angrycelldata$user_links
user_mindrlist1 <- angrycelldata$user_mindrlist1
user_mindrlist2 <- angrycelldata$user_mindrlist2
user_mlist1 <- angrycelldata$user_mlist1
user_mlist2 <- angrycelldata$user_mlist2
user_mlist3 <- angrycelldata$user_mlist3
user_Rlist <- angrycelldata$user_Rlist
user_slist <- angrycelldata$user_slist
panglaodb_hs <- angrycelldata$panglaodb_hs
panglaodb_mm <- angrycelldata$panglaodb_mm
##save rda
usethis::use_data(A_M, addm_qss, D_M, db_self, db_self_mm10, db_user_mm10,
db_users, db1, db2, db3, db4, dblayers, dbref, dbspf, HKgene,
homolog_Human_mouse, links, mindrlist1, mindrlist2, mlist1,
mlist2, mlist3, MSigDBlist, MSigDBnames, Rlist, slist,
templv1.2.0, user_links, user_mindrlist1, user_mindrlist2,
user_mlist1, user_mlist2, user_mlist3, user_Rlist, user_slist,
panglaodb_hs,panglaodb_mm,
overwrite = TRUE,
internal = TRUE)
# orthologs genesets
files <- list.files('./data-raw/')
txtfiles <- files[grepl('txt$',files)]
orthologslist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/', x), sep = '\t')
})
versions <- gsub('^.*version_|.txt$','', txtfiles)
names(orthologslist) <- paste0('v',versions)
# symbol ensembl genelist
files <- list.files('./data-raw/sym_ebl/Human/')
txtfiles <- files[grepl('txt$',files)]
humanlist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/sym_ebl/Human/', x), sep = '\t')
})
versions <- gsub('^.*version_|.txt$','', txtfiles)
names(humanlist) <- paste0('v',versions)
files <- list.files('./data-raw/sym_ebl/Mouse/')
txtfiles <- files[grepl('txt$',files)]
# orthologs genesets
files <- list.files('./data-raw/')
txtfiles <- files[grepl('txt$',files)]
orthologslist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/', x), sep = '\t')
})
versions <- gsub('^.*version_|.txt$','', txtfiles)
names(orthologslist) <- paste0('v',versions)
# symbol ensembl genelist
files <- list.files('./data-raw/sym_ebl/Human/')
txtfiles <- files[grepl('txt$',files)]
humanlist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/sym_ebl/Human/', x), sep = '\t')
})
versions <- gsub('^.*version_|.txt$','', txtfiles)
names(humanlist) <- paste0('v',versions)
files <- list.files('./data-raw/sym_ebl/Mouse/')
# orthologs genesets
files <- list.files('./data-raw/')
txtfiles <- files[grepl('txt$',files)]
orthologslist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/', x), sep = '\t')
})
versions <- gsub('^.*version_|.txt$','', txtfiles)
names(orthologslist) <- paste0('v',versions)
# symbol ensembl genelist
files <- list.files('./data-raw/sym_ebl/Human/')
txtfiles <- files[grepl('txt$',files)]
humanlist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/sym_ebl/Human/', x), sep = '\t')
})
# orthologs genesets
files <- list.files('./data-raw/')
txtfiles <- files[grepl('orthologs_mouse$',files)]
txtfiles <- files[grepl('orthologs_m$',files)]
txtfiles <- files[grepl('orthologs_$',files)]
files
# orthologs genesets
files <- list.files('./data-raw/')
txtfiles <- files[grepl('^orthologs_mouse',files)]
orthologslist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/', x), sep = '\t')
})
versions <- gsub('^.*version_|.txt$','', txtfiles)
names(orthologslist) <- paste0('v',versions)
# symbol ensembl genelist
files <- list.files('./data-raw/sym_ebl/Human/')
txtfiles <- files[grepl('txt$',files)]
humanlist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/sym_ebl/Human/', x), sep = '\t')
})
versions <- gsub('^.*version_|.txt$','', txtfiles)
names(humanlist) <- paste0('v',versions)
files <- list.files('./data-raw/sym_ebl/Mouse/')
txtfiles <- files[grepl('txt$',files)]
mouselist <- lapply(txtfiles, function(x) {
df <- read.table(paste0('./data-raw/sym_ebl/Mouse/', x), sep = '\t')
})
versions <- gsub('^.*version_|.txt$','', txtfiles)
names(mouselist) <- paste0('v',versions)
symbol_ensembl_list <- list(Human = humanlist, Mouse = mouselist)
##save rda
usethis::use_data(A_M, addm_qss, D_M, db_self, db_self_mm10, db_user_mm10,
db_users, db1, db2, db3, db4, dblayers, dbref, dbspf, HKgene,
homolog_Human_mouse, links, mindrlist1, mindrlist2, mlist1,
mlist2, mlist3, MSigDBlist, MSigDBnames, Rlist, slist,
templv1.2.0, user_links, user_mindrlist1, user_mindrlist2,
user_mlist1, user_mlist2, user_mlist3, user_Rlist, user_slist,
panglaodb_hs,panglaodb_mm, orthologslist,symbol_ensembl_list,
overwrite = TRUE,
internal = TRUE)
cat(paste(paste0(names(angrycelldata), ' <- angrycelldata$', names(angrycelldata)),collapse = '\n'))
remotes::install_github('Zhihao-Huang/scPioneer')
remotes::install_github('Zhihao-Huang/scPioneer')
remotes::install_github('Zhihao-Huang/scPioneer')
options(timeout=400)
remotes::install_github('Zhihao-Huang/scPioneer')
